{"version":3,"sources":["DrumPad.js","DrumBox.js","App.js","serviceWorker.js","index.js"],"names":["activate","animation","deactivate","DrumPad","props","state","padStyle","playSound","bind","handleKeyPress","activatePad","document","addEventListener","this","removeEventListener","e","keyCode","setState","sound","getElementById","keyTrigger","currentTime","play","updateDisplay","id","replace","setTimeout","deActivatePad","onClick","className","style","src","url","React","Component","DrumBox","drums","drumset","map","i","Header","App","drumset1","display","displayClipName","name","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b6031248.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst activate = {\r\n    animation: '.5s activateDrumPad'\r\n};\r\n\r\nconst deactivate = {\r\n   animation: 'none'\r\n};\r\n\r\nclass DrumPad extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        padStyle: deactivate\r\n      }\r\n      this.playSound = this.playSound.bind(this);    \r\n      this.handleKeyPress = this.handleKeyPress.bind(this);\r\n      this.activatePad = this.activatePad.bind(this);\r\n    } \r\n    \r\n    componentDidMount() {\r\n      document.addEventListener('keydown', this.handleKeyPress);\r\n    }\r\n    componentWillUnmount() {\r\n      document.removeEventListener('keydown', this.handleKeyPress);\r\n    }\r\n    \r\n    \r\n    handleKeyPress(e) {\r\n      if (e.keyCode === this.props.keyCode) {\r\n        this.playSound();\r\n      }\r\n    }\r\n    \r\n    activatePad() {\r\n      this.setState({\r\n        padStyle: activate\r\n      })\r\n    }\r\n    \r\n    deActivatePad() {\r\n      this.setState({\r\n        padStyle: deactivate\r\n      })\r\n    }\r\n    \r\n    playSound(e) {\r\n      const sound = document.getElementById(this.props.keyTrigger);\r\n      sound.currentTime = 0;\r\n      sound.play();    \r\n      this.activatePad();\r\n      this.props.updateDisplay(this.props.id.replace(/-/g, ' '));\r\n      setTimeout(() => this.deActivatePad(), 500);\r\n      \r\n    }\r\n    \r\n    render() { \r\n      return(\r\n        <div id={this.props.id} \r\n          onClick={this.playSound} \r\n          className=\"drum-pad\"\r\n          style={this.state.padStyle}>\r\n          <div id={this.props.id}>\r\n            <audio className='clip' id={this.props.keyTrigger} src={this.props.url}></audio>\r\n            {this.props.keyTrigger}\r\n          </div>\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n\r\n  export default DrumPad;","import React from 'react';\r\nimport DrumPad from './DrumPad'\r\n\r\n\r\nclass DrumBox extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n    }\r\n    render() {\r\n      const drums = this.props.drumset.map((i) => {\r\n        return(\r\n          <DrumPad\r\n            id={i.id}\r\n            url={i.url}\r\n            keyTrigger={i.keyTrigger} \r\n            keyCode={i.keyCode}\r\n            updateDisplay={this.props.updateDisplay}/>  \r\n          )\r\n        \r\n      });       \r\n        \r\n      return(\r\n        <div className=\"Drumbox\">\r\n          {drums}        \r\n        </div>\r\n      )\r\n    }\r\n  }\r\n\r\n  export default DrumBox;","import React from 'react';\nimport DrumBox from './DrumBox'\nimport './App.scss';\n\nconst Header = () => {\n  return(\n    <div className=\"Header\">\n      <h1>Fancy Beats Drum Machine</h1>\n      <p>Beat the drums to make music!</p>\n    </div>\n  )\n}\n\nclass App extends React.Component{\n  constructor(props) {\n    super(props);\n    this.state = {\n        drumset: drumset1,\n        display: ''\n    }\n    this.displayClipName = this.displayClipName.bind(this);\n  }\n  \n  \n  displayClipName(name) {\n    this.setState({\n      display: name\n    });\n  }\n  \n  clearDisplay() {\n    this.setState({\n      display: ''\n    });\n  }\n  \n  render() {   \n    return (\n      <div>\n        <Header/>\n        <div className=\"wrapper\">\n          <DrumBox \n            drumset={this.state.drumset}\n            updateDisplay={this.displayClipName}/>\n          <p>Currently playing: <div id=\"display\">{this.state.display}</div></p>\n        </div>\n      </div>\n    )\n  }\n};\nconst drumset1 = [{\n    keyCode: 81,\n    keyTrigger: 'Q',\n    id: 'Heater-1',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3'\n  }, {\n    keyCode: 87,\n    keyTrigger: 'W',\n    id: 'Heater-2',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3'\n  }, {\n    keyCode: 69,\n    keyTrigger: 'E',\n    id: 'Heater-3',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3'\n  }, {\n    keyCode: 65,\n    keyTrigger: 'A',\n    id: 'Heater-4',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3'\n  }, {\n    keyCode: 83,\n    keyTrigger: 'S',\n    id: 'Clap',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3'\n  }, {\n    keyCode: 68,\n    keyTrigger: 'D',\n    id: 'Open-HH',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3'\n  }, {\n    keyCode: 90,\n    keyTrigger: 'Z',\n    id: \"Kick-n'-Hat\",\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3'\n  }, {\n    keyCode: 88,\n    keyTrigger: 'X',\n    id: 'Kick',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3'\n  }, {\n    keyCode: 67,\n    keyTrigger: 'C',\n    id: 'Closed-HH',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3'\n  },\n];\n\nconst drumset2 = [{\n  keyCode: 81,\n  keyTrigger: 'Q',\n  id: 'Chord-1',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Chord_1.mp3'\n}, {\n  keyCode: 87,\n  keyTrigger: 'W',\n  id: 'Chord-2',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Chord_2.mp3'\n}, {\n  keyCode: 69,\n  keyTrigger: 'E',\n  id: 'Chord-3',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Chord_3.mp3'\n}, {\n  keyCode: 65,\n  keyTrigger: 'A',\n  id: 'Shaker',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Give_us_a_light.mp3'\n}, {\n  keyCode: 83,\n  keyTrigger: 'S',\n  id: 'Open-HH',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Dry_Ohh.mp3'\n}, {\n  keyCode: 68,\n  keyTrigger: 'D',\n  id: 'Closed-HH',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Bld_H1.mp3'\n}, {\n  keyCode: 90,\n  keyTrigger: 'Z',\n  id: 'Punchy-Kick',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/punchy_kick_1.mp3'\n}, {\n  keyCode: 88,\n  keyTrigger: 'X',\n  id: 'Side-Stick',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/side_stick_1.mp3'\n}, {\n  keyCode: 67,\n  keyTrigger: 'C',\n  id: 'Snare',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Brk_Snr.mp3'\n}];\n\n//ReactDOM.render(<App />, document.getElementById('drum-machine'));\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}