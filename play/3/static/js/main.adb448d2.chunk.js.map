{"version":3,"sources":["Buttons.js","App.js","serviceWorker.js","index.js"],"names":["Buttons","props","calcButtons","this","buttonset","map","i","id","className","class","title","keyCode","value","onClick","calculate","React","Component","buttonIsNumber","isOperator","endsWithOperator","endsWithNegativeSign","clearStyle","background","operatorStyle","equalsStyle","position","height","bottom","App","state","numberSet","buttonSets","numbers","operatorSet","operators","equalSet","equals","currentVal","prevVal","formula","currentSign","lastClicked","evaluated","bind","maxDigitWarning","handleOperators","handleEvaluate","initialize","handleDecimal","handleNumbers","setState","setTimeout","val","test","includes","expression","slice","replace","answer","Math","round","eval","toString","length","match","action","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.adb448d2.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nclass Buttons extends React.Component {\r\n    constructor(props) {\r\n      super(props);      \r\n    } \r\n    \r\n    render() {\r\n      const calcButtons = this.props.buttonset.map((i) => {\r\n        return(\r\n          <div id={i.id} \r\n              className={i.class} \r\n              title={i.id} \r\n              keyCode={i.value}\r\n              onClick={() => {this.props.calculate(i.value)}}>\r\n              {i.value}\r\n          </div>\r\n        )\r\n      });       \r\n      \r\n        return(\r\n          <div>\r\n            {calcButtons}\r\n          </div>\r\n        ) \r\n      }\r\n    }\r\n\r\n    \r\nexport default Buttons;","import React from 'react';\nimport Buttons from './Buttons';\n\nconst buttonIsNumber = /[0123456789]/;\nconst isOperator = /[/x+‑]/;\nconst endsWithOperator = /[x+/‑]$/;\nconst endsWithNegativeSign = /[x/+‑]$/;\nconst clearStyle = { background: \"#ac3939\" };\nconst operatorStyle = { background: \"#666666\" };\nconst equalsStyle = {\n    background: \"#004466\",\n    position: \"absolute\",\n    height: 130,\n    bottom: 5\n  };\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n     this.state = {\n        numberSet: buttonSets.numbers,\n        operatorSet: buttonSets.operators,\n        equalSet: buttonSets.equals,\n        currentVal: \"0\",\n        prevVal: \"0\",\n        formula: \"\",\n        currentSign: \"pos\",\n        lastClicked: \"\",\n        evaluated: 'false'          \n    }   \n    \n    this.calculate = this.calculate.bind(this); \n    this.maxDigitWarning = this.maxDigitWarning.bind(this);\n    this.handleOperators = this.handleOperators.bind(this);\n    this.handleEvaluate = this.handleEvaluate.bind(this);\n    this.initialize = this.initialize.bind(this);\n    this.handleDecimal = this.handleDecimal.bind(this);\n    this.handleNumbers = this.handleNumbers.bind(this);  \n  }  \n  \n  maxDigitWarning() {\n    this.setState({\n      currentVal: \"Digit Limit Met\",\n      prevVal: this.state.currentVal\n    });\n    setTimeout(() => this.setState({ currentVal: this.state.prevVal }), 1000);\n  }\n\n  \n  calculate(val) {\n    // is operator     \n    if (isOperator.test(val) && !this.state.currentVal.includes(\"Limit\")) {     \n      this.handleOperators(val);    \n    }\n    \n    // is number    \n    if (buttonIsNumber.test(val) && !this.state.currentVal.includes(\"Limit\")) {\n      this.handleNumbers(val);\n    }\n    \n    // if decimal\n    if (val === '.') {\n      this.handleDecimal();\n    }\n    \n    if (val === '=') {\n      this.handleEvaluate();\n    }\n    \n    if (val === 'c') {\n      this.initialize();\n    }\n  }\n  \n  handleEvaluate() {\n    if (!this.state.currentVal.includes(\"Limit\")) {\n      let expression = this.state.formula;\n      //console.log(\"Evaluating \" + expression);\n      while (endsWithOperator.test(expression)) {\n        expression = expression.slice(0, -1);\n      }\n      expression = expression.replace(/\\x/g, \"*\").replace(/‑/g, \"-\");\n      //console.log(\"expression: \" + expression);\n      let answer = Math.round(1000000000000 * eval(expression)) / 1000000000000;\n      this.setState({\n        currentVal: answer.toString(),\n        formula:\n          expression.replace(/-/g, \"‑\") + \"=\" + answer,\n        prevVal: answer,\n        evaluated: true\n      });\n    }\n  }\n\n  \n  handleOperators(val) {\n    if (!this.state.currentVal.includes(\"Limit\")) {  \n      const value = val;\n      const { formula, prevVal, evaluated } = this.state;\n      this.setState({ currentVal: value, evaluated: false });\n            \n      if (evaluated) {\n        this.setState({ formula: prevVal + value });\n        } else if (!endsWithOperator.test(formula)) {        \n          this.setState ({          \n            prevVal: formula,\n            formula: formula + value\n          });\n        \n        } else if (!endsWithNegativeSign.test(formula)) {\n          this.setState({\n            formula:  (endsWithNegativeSign.test(formula + value) ? formula : prevVal) + value\n          }) \n\n        } else if (value !== \"‑\") {\n          this.setState ({            \n            formula: prevVal + value\n          });\n                \n        } else {\n           this.setState ({            \n            formula: formula + value\n          });\n       }\n    }\n  }\n      \n        \n  handleNumbers(val) {\n    if (!this.state.currentVal.includes(\"Limit\")) {\n      const { currentVal, formula, evaluated } = this.state;\n      const value = val;\n      this.setState({ evaluated: false });\n      if (currentVal.length > 21) {\n        this.maxDigitWarning();\n      } else if (evaluated) {\n        this.setState({\n          currentVal: value,\n          formula: value !== \"0\" ? value : \"\"\n        });\n      } else {\n        this.setState({\n          currentVal:\n            currentVal === \"0\" || isOperator.test(currentVal)\n              ? value\n              : currentVal + value,\n          formula:\n            currentVal === \"0\" && value === \"0\"\n              ? formula === \"\" ? value : formula\n              : /([^.0-9]0|^0)$/.test(formula)\n                ? formula.slice(0, -1) + value\n                : formula + value\n        });\n      }\n    }\n  }\n\n  handleDecimal() {\n    if (this.state.evaluated === true) {\n      this.setState({\n        currentVal: \"0.\",\n        formula: \"0.\",\n        evaluated: false\n      });\n    } else if (\n      !this.state.currentVal.includes(\".\") &&\n      !this.state.currentVal.includes(\"Limit\")\n    ) {\n      this.setState({ evaluated: false });\n      if (this.state.currentVal.length > 21) {\n        this.maxDigitWarning();\n      } else if (\n        endsWithOperator.test(this.state.formula) ||\n        (this.state.currentVal === \"0\" && this.state.formula === \"\")\n      ) {\n        this.setState({\n          currentVal: \"0.\",\n          formula: this.state.formula + \"0.\"\n        });\n      } else {\n        this.setState({\n          currentVal: this.state.formula.match(/(-?\\d+\\.?\\d*)$/)[0] + \".\",\n          formula: this.state.formula + \".\"\n        });\n      }\n    }\n  }\n\n  initialize() {\n    this.setState({\n      currentVal: \"0\",\n      prevVal: \"0\",\n      formula: \"\",\n      currentSign: \"pos\",\n      lastClicked: \"\",\n      evaluated: false\n    });\n}\n  \n  render() {    \n    const styles = {className:'display formula'};\n    //console.log(\"RENDER: currentVal: \" + this.state.currentVal + \" | Formula: \" + this.state.formula + \" | prevVal: \" + this.state.prevVal + \" | evaluated: \" + this.state.evaluated);\n    return(\n      <div className=\"Header\">\n        <h1>Calculator!</h1>\n        <p>Press numbers on the left to see the calculation on the right.</p>   \n        <div className=\"leftCol\">\n          <Buttons \n            buttonset = {this.state.numberSet}\n            calculate = {this.calculate}/>\n        </div>\n        <div className=\"rightCol\">\n          <Buttons \n            buttonset = {this.state.operatorSet}\n            calculate = {this.calculate}/>\n          <input value={this.state.formula} id=\"formula\" className={styles.className} />       \n          <input value={this.state.currentVal} id=\"display\" className=\"display\"/>\n          <Buttons \n            buttonset = {this.state.equalSet}\n            calculate = {this.calculate}/>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst buttonSets = {\n  equals: [\n      {\n      id: 'equals',\n      class: 'equal',\n      value: '=',\n      action: 'equals'\n      }\n  ],\n  operators: [\n      {\n      id: 'divide',\n      class: 'operator1',\n      value: '/',\n      action: 'divide'\n      },\n      {\n      id: 'multiply',\n      class: 'operator2',\n      value: 'x',\n      action: 'multiply'\n      },\n      {\n      id: 'add',\n      class: 'operator3',\n      value: '+',\n      action: 'add'\n      },\n      {\n      id: 'subtract',\n      class: 'operator4',\n      value: '‑',\n      action: 'subtract'\n      }\n  ],\n  numbers: [ \n      {\n      id: 'one',\n      value: '1',\n      class: 'number1'    \n      },\n      {\n      id: 'two',\n      value: '2',\n      class: 'number2'\n      },\n      {\n      id: 'three',\n      value: '3',\n      class: 'number3'\n      },\n      {\n      id: 'four',\n      value: '4',\n      class: 'number4'\n      },\n      {\n      id: 'five',\n      value: '5',\n      class: 'number5'\n      },\n      {\n      id: 'six',\n      value: '6',\n      class: 'number6'\n      },\n      {\n      id: 'seven',\n      value: '7',\n      class: 'number7'\n      },\n      {\n      id: 'eight',\n      value: '8',\n      class: 'number8'\n      },\n      {\n      id: 'nine',\n      value: '9',\n      class: 'number9'\n      },\n      {\n      id: 'zero',\n      value: '0',\n      class: 'number0'\n      },\n      {\n      id: 'decimal',\n      value: '.',\n      class: 'numberdec'\n      },\n      {\n      id: 'clear',\n      value: 'c',\n      class: 'numberclear'\n      }\n  ]\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}